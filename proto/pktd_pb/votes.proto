syntax = "proto3";

package pkt_pb;
option go_package = "github.com/pkt-cash/pktd/generated/proto/pkt_pb";

message AddressBalance {
    // The balance of the address at this block height
    uint64 balance = 1;
    // The number of the block in which this entry was updated
    uint32 block_num = 2;
}

// The value for the entry in the addressbalances table
// The key is the address in pkScript form
message AddressBalances {
    // Balances contains at most TWO entries.
    //
    // 1. In the event that a new address emerged on chain and now has a balance,
    // there will be only one entry which will be newer than the most recent
    // snapshot. The snapshot balance is 0.
    //
    // 2. If that address does not change at all and a snapshot window passes,
    // there will be one entry which is older than the most recent snapshot.
    // The snapshot balance is the value of the entry.
    //
    // 3. In the event that there was a recent change of balance of an address
    // which pre-dates the most recent snapshot, there will be two entries,
    // one from before the most recent snapshot and one from after.
    // The snapshot balance is the older entry.
    //
    // 4. If another snapshot takes place without any change to that address,
    // there will still be two balance entries, both from before the most
    // recent snapshot. The snapshot balance is the newer entry.
    repeated AddressBalance balances = 1;
}

// The value of the entry in the Votes table
message Vote {
    // The address of the voter in pkScript form
    bytes addr_script = 1;
    // The address that is being voted for in pkScript form
    bytes vote_for_script = 2;
    // True if this voter is willing to candidate and potentially win
    bool willing_candidate = 3;
    // The block number wherein the vote was cast
    uint32 cast_block_num = 4;
}

// The value for the entry to the votes table
// The key is the block number in big endian
message BlockVotes {
    repeated Vote votes = 1;
}