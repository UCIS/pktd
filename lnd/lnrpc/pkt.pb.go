// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: pkt.proto

package lnrpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NeutrinoBan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr     string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Reason   string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	EndTime  string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	BanScore int32  `protobuf:"varint,4,opt,name=ban_score,json=banScore,proto3" json:"ban_score,omitempty"`
}

func (x *NeutrinoBan) Reset() {
	*x = NeutrinoBan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeutrinoBan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeutrinoBan) ProtoMessage() {}

func (x *NeutrinoBan) ProtoReflect() protoreflect.Message {
	mi := &file_pkt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeutrinoBan.ProtoReflect.Descriptor instead.
func (*NeutrinoBan) Descriptor() ([]byte, []int) {
	return file_pkt_proto_rawDescGZIP(), []int{0}
}

func (x *NeutrinoBan) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *NeutrinoBan) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *NeutrinoBan) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *NeutrinoBan) GetBanScore() int32 {
	if x != nil {
		return x.BanScore
	}
	return 0
}

type NeutrinoQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peer             string `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Command          string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	ReqNum           uint32 `protobuf:"varint,3,opt,name=req_num,json=reqNum,proto3" json:"req_num,omitempty"`
	CreateTime       uint32 `protobuf:"varint,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	LastRequestTime  uint32 `protobuf:"varint,5,opt,name=last_request_time,json=lastRequestTime,proto3" json:"last_request_time,omitempty"`
	LastResponseTime uint32 `protobuf:"varint,6,opt,name=last_response_time,json=lastResponseTime,proto3" json:"last_response_time,omitempty"`
}

func (x *NeutrinoQuery) Reset() {
	*x = NeutrinoQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeutrinoQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeutrinoQuery) ProtoMessage() {}

func (x *NeutrinoQuery) ProtoReflect() protoreflect.Message {
	mi := &file_pkt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeutrinoQuery.ProtoReflect.Descriptor instead.
func (*NeutrinoQuery) Descriptor() ([]byte, []int) {
	return file_pkt_proto_rawDescGZIP(), []int{1}
}

func (x *NeutrinoQuery) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

func (x *NeutrinoQuery) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *NeutrinoQuery) GetReqNum() uint32 {
	if x != nil {
		return x.ReqNum
	}
	return 0
}

func (x *NeutrinoQuery) GetCreateTime() uint32 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *NeutrinoQuery) GetLastRequestTime() uint32 {
	if x != nil {
		return x.LastRequestTime
	}
	return 0
}

func (x *NeutrinoQuery) GetLastResponseTime() uint32 {
	if x != nil {
		return x.LastResponseTime
	}
	return 0
}

type NeutrinoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peers          []*PeerDesc      `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	Bans           []*NeutrinoBan   `protobuf:"bytes,2,rep,name=bans,proto3" json:"bans,omitempty"`
	Queries        []*NeutrinoQuery `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	BlockHash      string           `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Height         int32            `protobuf:"varint,5,opt,name=height,proto3" json:"height,omitempty"`
	BlockTimestamp string           `protobuf:"bytes,6,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	IsSyncing      bool             `protobuf:"varint,7,opt,name=is_syncing,json=isSyncing,proto3" json:"is_syncing,omitempty"`
}

func (x *NeutrinoInfo) Reset() {
	*x = NeutrinoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NeutrinoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeutrinoInfo) ProtoMessage() {}

func (x *NeutrinoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeutrinoInfo.ProtoReflect.Descriptor instead.
func (*NeutrinoInfo) Descriptor() ([]byte, []int) {
	return file_pkt_proto_rawDescGZIP(), []int{2}
}

func (x *NeutrinoInfo) GetPeers() []*PeerDesc {
	if x != nil {
		return x.Peers
	}
	return nil
}

func (x *NeutrinoInfo) GetBans() []*NeutrinoBan {
	if x != nil {
		return x.Bans
	}
	return nil
}

func (x *NeutrinoInfo) GetQueries() []*NeutrinoQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *NeutrinoInfo) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *NeutrinoInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *NeutrinoInfo) GetBlockTimestamp() string {
	if x != nil {
		return x.BlockTimestamp
	}
	return ""
}

func (x *NeutrinoInfo) GetIsSyncing() bool {
	if x != nil {
		return x.IsSyncing
	}
	return false
}

type WalletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentBlockHash      string       `protobuf:"bytes,1,opt,name=current_block_hash,json=currentBlockHash,proto3" json:"current_block_hash,omitempty"`
	CurrentHeight         int32        `protobuf:"varint,2,opt,name=current_height,json=currentHeight,proto3" json:"current_height,omitempty"`
	CurrentBlockTimestamp string       `protobuf:"bytes,3,opt,name=current_block_timestamp,json=currentBlockTimestamp,proto3" json:"current_block_timestamp,omitempty"`
	WalletVersion         int32        `protobuf:"varint,4,opt,name=wallet_version,json=walletVersion,proto3" json:"wallet_version,omitempty"`
	WalletStats           *WalletStats `protobuf:"bytes,5,opt,name=wallet_stats,json=walletStats,proto3" json:"wallet_stats,omitempty"`
}

func (x *WalletInfo) Reset() {
	*x = WalletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletInfo) ProtoMessage() {}

func (x *WalletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletInfo.ProtoReflect.Descriptor instead.
func (*WalletInfo) Descriptor() ([]byte, []int) {
	return file_pkt_proto_rawDescGZIP(), []int{3}
}

func (x *WalletInfo) GetCurrentBlockHash() string {
	if x != nil {
		return x.CurrentBlockHash
	}
	return ""
}

func (x *WalletInfo) GetCurrentHeight() int32 {
	if x != nil {
		return x.CurrentHeight
	}
	return 0
}

func (x *WalletInfo) GetCurrentBlockTimestamp() string {
	if x != nil {
		return x.CurrentBlockTimestamp
	}
	return ""
}

func (x *WalletInfo) GetWalletVersion() int32 {
	if x != nil {
		return x.WalletVersion
	}
	return 0
}

func (x *WalletInfo) GetWalletStats() *WalletStats {
	if x != nil {
		return x.WalletStats
	}
	return nil
}

type PeerDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesReceived        uint64 `protobuf:"varint,1,opt,name=bytes_received,json=bytesReceived,proto3" json:"bytes_received,omitempty"`
	BytesSent            uint64 `protobuf:"varint,2,opt,name=bytes_sent,json=bytesSent,proto3" json:"bytes_sent,omitempty"`
	LastRecv             string `protobuf:"bytes,3,opt,name=last_recv,json=lastRecv,proto3" json:"last_recv,omitempty"`
	LastSend             string `protobuf:"bytes,4,opt,name=last_send,json=lastSend,proto3" json:"last_send,omitempty"`
	Connected            bool   `protobuf:"varint,5,opt,name=connected,proto3" json:"connected,omitempty"`
	Addr                 string `protobuf:"bytes,6,opt,name=addr,proto3" json:"addr,omitempty"`
	Inbound              bool   `protobuf:"varint,7,opt,name=inbound,proto3" json:"inbound,omitempty"`
	Na                   string `protobuf:"bytes,8,opt,name=na,proto3" json:"na,omitempty"` //netaddress address:port
	Id                   int32  `protobuf:"varint,9,opt,name=id,proto3" json:"id,omitempty"`
	UserAgent            string `protobuf:"bytes,10,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Services             string `protobuf:"bytes,11,opt,name=services,proto3" json:"services,omitempty"`
	VersionKnown         bool   `protobuf:"varint,12,opt,name=version_known,json=versionKnown,proto3" json:"version_known,omitempty"`
	AdvertisedProtoVer   uint32 `protobuf:"varint,13,opt,name=advertised_proto_ver,json=advertisedProtoVer,proto3" json:"advertised_proto_ver,omitempty"`
	ProtocolVersion      uint32 `protobuf:"varint,14,opt,name=protocol_version,json=protocolVersion,proto3" json:"protocol_version,omitempty"`
	SendHeadersPreferred bool   `protobuf:"varint,15,opt,name=send_headers_preferred,json=sendHeadersPreferred,proto3" json:"send_headers_preferred,omitempty"`
	VerAckReceived       bool   `protobuf:"varint,16,opt,name=ver_ack_received,json=verAckReceived,proto3" json:"ver_ack_received,omitempty"`
	WitnessEnabled       bool   `protobuf:"varint,17,opt,name=witness_enabled,json=witnessEnabled,proto3" json:"witness_enabled,omitempty"`
	WireEncoding         string `protobuf:"bytes,18,opt,name=wire_encoding,json=wireEncoding,proto3" json:"wire_encoding,omitempty"`
	TimeOffset           int64  `protobuf:"varint,19,opt,name=time_offset,json=timeOffset,proto3" json:"time_offset,omitempty"`
	TimeConnected        string `protobuf:"bytes,20,opt,name=time_connected,json=timeConnected,proto3" json:"time_connected,omitempty"`
	StartingHeight       int32  `protobuf:"varint,21,opt,name=starting_height,json=startingHeight,proto3" json:"starting_height,omitempty"`
	LastBlock            int32  `protobuf:"varint,22,opt,name=last_block,json=lastBlock,proto3" json:"last_block,omitempty"`
	LastAnnouncedBlock   []byte `protobuf:"bytes,23,opt,name=last_announced_block,json=lastAnnouncedBlock,proto3" json:"last_announced_block,omitempty"`
	LastPingNonce        uint64 `protobuf:"varint,24,opt,name=last_ping_nonce,json=lastPingNonce,proto3" json:"last_ping_nonce,omitempty"`
	LastPingTime         string `protobuf:"bytes,25,opt,name=last_ping_time,json=lastPingTime,proto3" json:"last_ping_time,omitempty"`
	LastPingMicros       int64  `protobuf:"varint,26,opt,name=last_ping_micros,json=lastPingMicros,proto3" json:"last_ping_micros,omitempty"`
}

func (x *PeerDesc) Reset() {
	*x = PeerDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDesc) ProtoMessage() {}

func (x *PeerDesc) ProtoReflect() protoreflect.Message {
	mi := &file_pkt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDesc.ProtoReflect.Descriptor instead.
func (*PeerDesc) Descriptor() ([]byte, []int) {
	return file_pkt_proto_rawDescGZIP(), []int{4}
}

func (x *PeerDesc) GetBytesReceived() uint64 {
	if x != nil {
		return x.BytesReceived
	}
	return 0
}

func (x *PeerDesc) GetBytesSent() uint64 {
	if x != nil {
		return x.BytesSent
	}
	return 0
}

func (x *PeerDesc) GetLastRecv() string {
	if x != nil {
		return x.LastRecv
	}
	return ""
}

func (x *PeerDesc) GetLastSend() string {
	if x != nil {
		return x.LastSend
	}
	return ""
}

func (x *PeerDesc) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

func (x *PeerDesc) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *PeerDesc) GetInbound() bool {
	if x != nil {
		return x.Inbound
	}
	return false
}

func (x *PeerDesc) GetNa() string {
	if x != nil {
		return x.Na
	}
	return ""
}

func (x *PeerDesc) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PeerDesc) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *PeerDesc) GetServices() string {
	if x != nil {
		return x.Services
	}
	return ""
}

func (x *PeerDesc) GetVersionKnown() bool {
	if x != nil {
		return x.VersionKnown
	}
	return false
}

func (x *PeerDesc) GetAdvertisedProtoVer() uint32 {
	if x != nil {
		return x.AdvertisedProtoVer
	}
	return 0
}

func (x *PeerDesc) GetProtocolVersion() uint32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *PeerDesc) GetSendHeadersPreferred() bool {
	if x != nil {
		return x.SendHeadersPreferred
	}
	return false
}

func (x *PeerDesc) GetVerAckReceived() bool {
	if x != nil {
		return x.VerAckReceived
	}
	return false
}

func (x *PeerDesc) GetWitnessEnabled() bool {
	if x != nil {
		return x.WitnessEnabled
	}
	return false
}

func (x *PeerDesc) GetWireEncoding() string {
	if x != nil {
		return x.WireEncoding
	}
	return ""
}

func (x *PeerDesc) GetTimeOffset() int64 {
	if x != nil {
		return x.TimeOffset
	}
	return 0
}

func (x *PeerDesc) GetTimeConnected() string {
	if x != nil {
		return x.TimeConnected
	}
	return ""
}

func (x *PeerDesc) GetStartingHeight() int32 {
	if x != nil {
		return x.StartingHeight
	}
	return 0
}

func (x *PeerDesc) GetLastBlock() int32 {
	if x != nil {
		return x.LastBlock
	}
	return 0
}

func (x *PeerDesc) GetLastAnnouncedBlock() []byte {
	if x != nil {
		return x.LastAnnouncedBlock
	}
	return nil
}

func (x *PeerDesc) GetLastPingNonce() uint64 {
	if x != nil {
		return x.LastPingNonce
	}
	return 0
}

func (x *PeerDesc) GetLastPingTime() string {
	if x != nil {
		return x.LastPingTime
	}
	return ""
}

func (x *PeerDesc) GetLastPingMicros() int64 {
	if x != nil {
		return x.LastPingMicros
	}
	return 0
}

type WalletStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaintenanceInProgress       bool   `protobuf:"varint,1,opt,name=maintenance_in_progress,json=maintenanceInProgress,proto3" json:"maintenance_in_progress,omitempty"`
	MaintenanceName             string `protobuf:"bytes,2,opt,name=maintenance_name,json=maintenanceName,proto3" json:"maintenance_name,omitempty"`
	MaintenanceCycles           int32  `protobuf:"varint,3,opt,name=maintenance_cycles,json=maintenanceCycles,proto3" json:"maintenance_cycles,omitempty"`
	MaintenanceLastBlockVisited int32  `protobuf:"varint,4,opt,name=maintenance_last_block_visited,json=maintenanceLastBlockVisited,proto3" json:"maintenance_last_block_visited,omitempty"`
	TimeOfLastMaintenance       string `protobuf:"bytes,5,opt,name=time_of_last_maintenance,json=timeOfLastMaintenance,proto3" json:"time_of_last_maintenance,omitempty"`
	Syncing                     bool   `protobuf:"varint,6,opt,name=syncing,proto3" json:"syncing,omitempty"`
	SyncStarted                 string `protobuf:"bytes,7,opt,name=sync_started,json=syncStarted,proto3" json:"sync_started,omitempty"`
	SyncRemainingSeconds        int64  `protobuf:"varint,8,opt,name=sync_remaining_seconds,json=syncRemainingSeconds,proto3" json:"sync_remaining_seconds,omitempty"`
	SyncCurrentBlock            int32  `protobuf:"varint,9,opt,name=sync_current_block,json=syncCurrentBlock,proto3" json:"sync_current_block,omitempty"`
	SyncFrom                    int32  `protobuf:"varint,10,opt,name=sync_from,json=syncFrom,proto3" json:"sync_from,omitempty"`
	SyncTo                      int32  `protobuf:"varint,11,opt,name=sync_to,json=syncTo,proto3" json:"sync_to,omitempty"`
	BirthdayBlock               int32  `protobuf:"varint,12,opt,name=birthday_block,json=birthdayBlock,proto3" json:"birthday_block,omitempty"`
}

func (x *WalletStats) Reset() {
	*x = WalletStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletStats) ProtoMessage() {}

func (x *WalletStats) ProtoReflect() protoreflect.Message {
	mi := &file_pkt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletStats.ProtoReflect.Descriptor instead.
func (*WalletStats) Descriptor() ([]byte, []int) {
	return file_pkt_proto_rawDescGZIP(), []int{5}
}

func (x *WalletStats) GetMaintenanceInProgress() bool {
	if x != nil {
		return x.MaintenanceInProgress
	}
	return false
}

func (x *WalletStats) GetMaintenanceName() string {
	if x != nil {
		return x.MaintenanceName
	}
	return ""
}

func (x *WalletStats) GetMaintenanceCycles() int32 {
	if x != nil {
		return x.MaintenanceCycles
	}
	return 0
}

func (x *WalletStats) GetMaintenanceLastBlockVisited() int32 {
	if x != nil {
		return x.MaintenanceLastBlockVisited
	}
	return 0
}

func (x *WalletStats) GetTimeOfLastMaintenance() string {
	if x != nil {
		return x.TimeOfLastMaintenance
	}
	return ""
}

func (x *WalletStats) GetSyncing() bool {
	if x != nil {
		return x.Syncing
	}
	return false
}

func (x *WalletStats) GetSyncStarted() string {
	if x != nil {
		return x.SyncStarted
	}
	return ""
}

func (x *WalletStats) GetSyncRemainingSeconds() int64 {
	if x != nil {
		return x.SyncRemainingSeconds
	}
	return 0
}

func (x *WalletStats) GetSyncCurrentBlock() int32 {
	if x != nil {
		return x.SyncCurrentBlock
	}
	return 0
}

func (x *WalletStats) GetSyncFrom() int32 {
	if x != nil {
		return x.SyncFrom
	}
	return 0
}

func (x *WalletStats) GetSyncTo() int32 {
	if x != nil {
		return x.SyncTo
	}
	return 0
}

func (x *WalletStats) GetBirthdayBlock() int32 {
	if x != nil {
		return x.BirthdayBlock
	}
	return 0
}

var File_pkt_proto protoreflect.FileDescriptor

var file_pkt_proto_rawDesc = []byte{
	0x0a, 0x09, 0x70, 0x6b, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6c, 0x6e, 0x72,
	0x70, 0x63, 0x22, 0x71, 0x0a, 0x0b, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x42, 0x61,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x5f,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x69,
	0x6e, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8c, 0x02, 0x0a, 0x0c, 0x4e, 0x65,
	0x75, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x65,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6c, 0x6e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6c, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x69, 0x6e, 0x6f,
	0x42, 0x61, 0x6e, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6e, 0x72,
	0x70, 0x63, 0x2e, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x69, 0x6e, 0x6f, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x53, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x22, 0xf7, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0c, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6c, 0x6e, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x22, 0x9b, 0x07, 0x0a, 0x08, 0x50, 0x65, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x76, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x76, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x61, 0x64, 0x76, 0x65, 0x72,
	0x74, 0x69, 0x73, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x41, 0x63, 0x6b,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x72, 0x65, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x22, 0x9b, 0x04, 0x0a, 0x0b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1b, 0x6d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6f, 0x66, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x16, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x79, 0x6e, 0x63, 0x54, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x24,
	0x5a, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x6b, 0x74,
	0x2d, 0x63, 0x61, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x74, 0x64, 0x2f, 0x6c, 0x6e, 0x64, 0x2f, 0x6c,
	0x6e, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkt_proto_rawDescOnce sync.Once
	file_pkt_proto_rawDescData = file_pkt_proto_rawDesc
)

func file_pkt_proto_rawDescGZIP() []byte {
	file_pkt_proto_rawDescOnce.Do(func() {
		file_pkt_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkt_proto_rawDescData)
	})
	return file_pkt_proto_rawDescData
}

var file_pkt_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pkt_proto_goTypes = []interface{}{
	(*NeutrinoBan)(nil),   // 0: lnrpc.NeutrinoBan
	(*NeutrinoQuery)(nil), // 1: lnrpc.NeutrinoQuery
	(*NeutrinoInfo)(nil),  // 2: lnrpc.NeutrinoInfo
	(*WalletInfo)(nil),    // 3: lnrpc.WalletInfo
	(*PeerDesc)(nil),      // 4: lnrpc.PeerDesc
	(*WalletStats)(nil),   // 5: lnrpc.WalletStats
}
var file_pkt_proto_depIdxs = []int32{
	4, // 0: lnrpc.NeutrinoInfo.peers:type_name -> lnrpc.PeerDesc
	0, // 1: lnrpc.NeutrinoInfo.bans:type_name -> lnrpc.NeutrinoBan
	1, // 2: lnrpc.NeutrinoInfo.queries:type_name -> lnrpc.NeutrinoQuery
	5, // 3: lnrpc.WalletInfo.wallet_stats:type_name -> lnrpc.WalletStats
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_pkt_proto_init() }
func file_pkt_proto_init() {
	if File_pkt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeutrinoBan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeutrinoQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NeutrinoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkt_proto_goTypes,
		DependencyIndexes: file_pkt_proto_depIdxs,
		MessageInfos:      file_pkt_proto_msgTypes,
	}.Build()
	File_pkt_proto = out.File
	file_pkt_proto_rawDesc = nil
	file_pkt_proto_goTypes = nil
	file_pkt_proto_depIdxs = nil
}
